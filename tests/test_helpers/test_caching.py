"""Tests for caching helper functions."""
from unittest.mock import patch

import pytest
from django.core.cache import cache

from futurex_openedx_extensions.helpers.caching import cache_dict


@pytest.fixture
def mock_cache():
    with patch.object(cache, 'get') as mock_get:
        with patch.object(cache, 'set') as mock_set:
            yield mock_get, mock_set


@cache_dict(timeout=77, key_generator_or_name='test_key')
def dummy_cached_func():
    return {'key': 'value'}


def test_cache_hit(mock_cache):  # pylint: disable=redefined-outer-name
    """Verify that the cache is hit and the result is returned."""
    mock_get, mock_set = mock_cache
    mock_get.return_value = {'key': 'value'}

    result = dummy_cached_func()
    assert result == {'key': 'value'}
    mock_get.assert_called_once_with('test_key')
    mock_set.assert_not_called()


def test_cache_miss(mock_cache):  # pylint: disable=redefined-outer-name
    """Verify that the cache is missed and the result is stored."""
    mock_get, mock_set = mock_cache
    mock_get.return_value = None

    result = dummy_cached_func()
    assert result == {'key': 'value'}
    mock_get.assert_called_once_with('test_key')
    mock_set.assert_called_once_with('test_key', {'key': 'value'}, 77)


def test_cache_key_callable(mock_cache):  # pylint: disable=redefined-outer-name
    """Verify that the cache key is generated by a callable."""
    mock_get, mock_set = mock_cache
    mock_get.return_value = None

    def key_gen(*args, **kwargs):
        return f"test_key_{args[0]}_{args[1]}"

    @cache_dict(timeout=88, key_generator_or_name=key_gen)
    def dummy_func(arg1, arg2):
        return {arg2: arg1}

    result = dummy_func(1, 'str')
    assert result == {'str': 1}
    mock_get.assert_called_once_with('test_key_1_str')
    mock_set.assert_called_once_with('test_key_1_str', {'str': 1}, 88)


def test_cache_key_generation_error(mock_cache, caplog):  # pylint: disable=redefined-outer-name
    """Verify that an error generating the cache key is logged."""
    mock_get, mock_set = mock_cache

    def key_gen(*args, **kwargs):
        raise ValueError("Error generating key")

    @cache_dict(timeout=60, key_generator_or_name=key_gen)
    def dummy_func():
        return {'key': 'value'}

    result = dummy_func()
    assert result == {'key': 'value'}
    mock_get.assert_not_called()
    mock_set.assert_not_called()
    assert "cache_dict: error generating cache key" in caplog.text


def test_cache_incorrect_result_type(mock_cache, caplog):  # pylint: disable=redefined-outer-name
    """Verify that an error is logged when the result is not a dictionary."""
    mock_get, mock_set = mock_cache
    mock_get.return_value = None

    @cache_dict(timeout=77, key_generator_or_name='test_key')
    def dummy_func():
        return ['not', 'a', 'dict']

    result = dummy_func()
    assert result == ['not', 'a', 'dict']
    mock_get.assert_called_once_with('test_key')
    mock_set.assert_not_called()
    assert "cache_dict: expecting dictionary result from dummy_func but got <class 'list'>" in caplog.text


def test_cache_key_not_callable_or_string(mock_cache, caplog):  # pylint: disable=redefined-outer-name
    """Verify that an error is logged when the key generator is not callable or a string."""
    mock_get, mock_set = mock_cache

    @cache_dict(timeout=60, key_generator_or_name=123)
    def dummy_func():
        return {'key': 'value'}

    result = dummy_func()
    assert result == {'key': 'value'}
    mock_get.assert_not_called()
    mock_set.assert_not_called()
    assert "cache_dict: error generating cache key: key_generator_or_name must be a callable or a string" in caplog.text


@pytest.mark.parametrize('timeout', [-1, 0, None, 77.5])
def test_bad_timeout(mock_cache, caplog, timeout):  # pylint: disable=redefined-outer-name
    """Verify that an error is logged when the timeout is not a positive integer."""
    mock_get, mock_set = mock_cache
    mock_get.return_value = None

    @cache_dict(timeout=timeout, key_generator_or_name='test_key')
    def dummy_func():
        return {'key': 'value'}

    result = dummy_func()
    assert result == {'key': 'value'}
    mock_get.assert_not_called()
    mock_set.assert_not_called()
    assert "cache_dict: error generating cache key: unexpected timout value. Should be an integer greater than 0" in \
           caplog.text
